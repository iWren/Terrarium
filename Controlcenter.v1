// testshapes demo for Adafruit RGBmatrixPanel library.
// Demonstrates the drawing abilities of the RGBmatrixPanel library.
// For 32x32 RGB LED matrix:
// http://www.adafruit.com/products/607
// 32x32 MATRICES DO NOT WORK WITH ARDUINO UNO or METRO 328.

// Written by Limor Fried/Ladyada & Phil Burgess/PaintYourDragon
// for Adafruit Industries.
// BSD license, all text above must be included in any redistribution.


//7/20/21 new version, not using tmp36, loop tested, added soil sensor
//7/22/21 attached final sensor(dallas waterproof temp), integrated into code
//8/4/21 retested code, troubleshooting(connection issues), got "water temperature" down to around 13.25 C
//8/5-6/21 worked on a timer system(failed) and then a button system that can switch system from night to day mode, water temp down to 15.56


#include <RGBmatrixPanel.h>
#include "Adafruit_seesaw.h"
#include <Arduino.h>
#include <Wire.h>
#include "Adafruit_SHT31.h"
#include <OneWire.h>
#include <DallasTemperature.h>

#define CLK 11
#define OE   9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2
#define D   A3

#define ONE_WIRE_BUS 6

int relay_humidity = 5;
int relay_peltier = 4;
int relay_light = 3;
int relay_fan = 2;

Adafruit_seesaw ss;
uint8_t loopCnt = 0;

Adafruit_SHT31 sht31 = Adafruit_SHT31();
bool enableHeater = false;

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
float water_temp;

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);

//enter values for start_time and turn_off_time and wake_up_time


//float start_time_hours;
//float start_time_minutes;
//float start_time;
//float turn_off_time_hours;
//float turn_off_time_minutes;
//float wake_up_time_hours;
//float wake_up_time_minutes;
//float night_length;
//float gap_time;
//float time_;
//float global_time;
//bool night;

//button activation

int buttonpin = 7;
int buttonstate;
int i;
bool night;


void setup() {

  Serial.begin(9600);

  matrix.begin();

  sht31.begin(0x44);

  ss.begin(0x36);

  sensors.begin();

  pinMode(relay_humidity, OUTPUT);
  digitalWrite(relay_humidity, HIGH);
  
  pinMode(relay_peltier, OUTPUT);
  digitalWrite(relay_peltier, HIGH);

  pinMode(relay_light, OUTPUT);
  digitalWrite(relay_light, LOW);

  pinMode(relay_fan, OUTPUT);
  digitalWrite(relay_fan, HIGH);

  pinMode(buttonpin, INPUT);

  // screen color, change to be user input changeable
  matrix.fillRect(0, 0, 32, 32, matrix.Color333(7, 0, 7));


  //establish start and end time

/*
 * start_time = start_time_hours * 3600 + start_time)minutes * 60;
 * night_time = turn_off_time_hours * 3600 + turn_off_time_minutes * 60;
 * wakeup_time = wake_up_time_hours * 3600 + wake_up_time_minutes * 60;
 * night_length = 86400 - (night_time - wakeup_time);
 * gap_time = end_time - start_time;
 */

}



void button() {
  // put your main code here, to run repeatedly:

 buttonstate = digitalRead(buttonpin);

if (buttonstate == LOW && i % 2 != 0) {
  night = true;
  i++;
}

else if (buttonstate == LOW && i % 2 == 0) {
  night = false;
  i++;
}


else {}

}



void loop() {

  button();

//air temp and humidity sensing//

  float t = sht31.readTemperature();
  float h = sht31.readHumidity();

  /*
  
  Serial.print("Air Temperature: ");
  Serial.println(t);
  Serial.print("Humidity: ");
  Serial.println(h);

  */



//soil temp and moisture//
  uint16_t capread = ss.touchRead(0);
  float soil_temp = ss.getTemp();

  /*

  Serial.print("Soil temperature: ");
  Serial.println(soil_temp);
  Serial.print("Capacitive: "); 
  Serial.println(capread);

  */

//water temp//

  sensors.requestTemperatures(); 

  float water_temp = sensors.getTempCByIndex(0);

  
  Serial.print("Water temperature: ");
  Serial.println(water_temp); 

  //night loop
  
  if (night == true) {

    matrix.fillRect(0, 0, 32, 32, matrix.Color333(0, 0, 0));
    Serial.println("Night time!");

    if (water_temp > 15) {
    Serial.println("not cold enough");
    digitalWrite(relay_peltier, LOW);
    
    }

    else {
    Serial.println("cold enough");
    digitalWrite(relay_peltier, HIGH);
    }

  }

 else if (night == false) {

    matrix.fillRect(0, 0, 32, 32, matrix.Color333(7, 0, 7));
    Serial.println("wake up");
    digitalWrite(relay_peltier, HIGH);
    
  }

delay(1000);

}


  
